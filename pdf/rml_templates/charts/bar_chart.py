# Autogenerated by ReportLab guiedit do not edit
from reportlab.graphics.shapes import Drawing, _DrawingEditorMixin
from reportlab.lib.colors import toColor  # , Color
from reportlab.graphics.charts.textlabels import Label
from reportlab.graphics.charts.barcharts import VerticalBarChart


class BarChart(_DrawingEditorMixin, Drawing):
    def __init__(self, width=400, height=200, *args, **kw):
        Drawing.__init__(self, width, height, *args, **kw)
        # Width and height of chart.
        self.width = 772
        self.height = 280
        # Add title
        self._add(self, Label(), name='title', validate=None, desc=None)
        self.title._text = 'Simple Bar Chart'
        self.title.fontSize = 24
        self.title.fontName = "Calibri"
        # Position Title
        self.title.x = 386
        self.title.y = 240
        # Add Bar chart to the Drawing.
        self._add(self, VerticalBarChart(), name="chart", validate=None, desc=None)
        # Bar Chart Position
        self.chart.x = 150
        self.chart.y = 20
        # Bar Chart Dimensions
        self.chart.width = 400
        self.chart.height = 150
        # Data will be sent from RML. However, defaults can be initialized here.
        self.chart.data = []
        self.chart.barLabelArray = None
        # Ticks invisible on X-Axis
        self.chart.categoryAxis.visibleTicks = 0
        # X-Axis visible
        self.chart.categoryAxis.visibleAxis = 1
        # X-Axis labels. Data will be sent from RML. However, defaults can be initialized here.
        self.chart.categoryAxis.categoryNames = []
        # Vertically display X-Axis labels
        self.chart.categoryAxis.labels.angle = 90
        # Offset for X-Axis Labels
        self.chart.categoryAxis.labels.dy = -15
        # Show bars one on top of the other.
        # self.chart.categoryAxis.style = 'stacked'
        # Y-Axis Visible
        self.chart.valueAxis.visibleAxis = 1
        self.chart.valueAxis.labelTextFormat = None
        # Avoid assuming minimum value as origin
        self.chart.valueAxis.avoidBoundSpace = (5, 0)
        # Offset for Y-Axis Labels
        self.chart.valueAxis.labels.dx = -8
        # Add Description Label for Y-Axis
        self._add(self, Label(), name='yAxistitle', validate=None, desc=None)
        # Label properties
        self.yAxistitle.angle = 90
        self.yAxistitle._text = 'Y axis text'
        self.yAxistitle.x = 110
        self.yAxistitle.y = 80
        # Color the bars
        self.chart.bars[0].fillColor = toColor(0xae1a09)
        self.chart.bars[0].strokeColor = toColor(0xae1a09)  # Color(.290196, .427451, .741176, 1)
        self.chart.bars[1].fillColor = toColor(0x0079c1)
        self.chart.bars[1].strokeColor = toColor(0x0079c1)

if __name__ == "__main__":  # NORUNTESTS
    BarChart().save(formats=['pdf'], outDir='.', fnRoot=None)
